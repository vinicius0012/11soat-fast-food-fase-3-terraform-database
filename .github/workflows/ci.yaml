on:
  push:
    branches: [main, develop]
    paths:
      - "terraform-database/**"
      - ".github/workflows/ci.yaml"
  workflow_dispatch:

env:
  TF_VERSION: "1.13.3"
  AWS_REGION: "sa-east-1"

permissions:
  id-token: write
  contents: read

defaults:
  run:
    working-directory: ./terraform-database

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform init -upgrade
      - run: terraform validate

  plan:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform init -upgrade
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="project_name=fastfood" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var='private_subnet_ids=${{ secrets.PRIVATE_SUBNET_IDS }}' \
            -var='allowed_sg_ids=${{ secrets.ALLOWED_SG_IDS }}'

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform init -upgrade
      - name: Clean old resources (optional)
        run: |
          echo "Cleaning old resources with fixed names..."
          # Limpar apenas recursos com nomes fixos (nÃ£o os novos com sufixo)
          aws ec2 delete-security-group --group-name fastfood-rds-sg 2>/dev/null || echo "Old Security Group not found"
          aws rds delete-db-subnet-group --db-subnet-group-name fastfood-rds-subnetgrp 2>/dev/null || echo "Old DB Subnet Group not found"
          aws secretsmanager delete-secret --secret-id fastfood/rds/postgres --force-delete-without-recovery 2>/dev/null || echo "Old Secret not found"
          aws rds delete-db-parameter-group --db-parameter-group-name fastfood-pg16 2>/dev/null || echo "Old DB Parameter Group not found"
          aws iam detach-role-policy --role-name fastfood-rds-monitoring-role --policy-arn arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole 2>/dev/null || echo "Old Policy not attached"
          aws iam delete-role --role-name fastfood-rds-monitoring-role 2>/dev/null || echo "Old IAM Role not found"
          echo "Old resources cleanup completed"
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="project_name=fastfood" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var='private_subnet_ids=${{ secrets.PRIVATE_SUBNET_IDS }}' \
            -var='allowed_sg_ids=${{ secrets.ALLOWED_SG_IDS }}'
      - run: terraform output || true

  destroy:
    name: Terraform Destroy (auto-cleanup)
    runs-on: ubuntu-latest
    needs: apply
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform init -upgrade
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var="project_name=fastfood" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var='private_subnet_ids=${{ secrets.PRIVATE_SUBNET_IDS }}' \
            -var='allowed_sg_ids=${{ secrets.ALLOWED_SG_IDS }}'
